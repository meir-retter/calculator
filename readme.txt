Calculator

The calculator takes in an arithmetic expression in the form of a String. It then converts it into an ArrayList
containing the "pieces" of the expression (e.g. "15", "+", ")", and "-2" are all pieces). Then come two processes: Stack
and Recursion.

The Stack process consists of a function which takes in the ArrayList of pieces (which is in infix notation) and returns
a new ArrayList of pieces in postfix notation. This is done using a stack. Then, another stack is used to evaluate this
postfix expression, returning an integer. The result is printed out.

In the Recursion process, the infix ArrayList is evaluated directly by finding the last operator and recursing. It
should return the same integer as the Stack process did, and print it out.

The input file must contain a number at the top, which is supposed to be the number of expressions to evaluate. This
doesn't really matter though; no matter what integer is on the first line, the program will evaluate all expressions
given. There does need to be some number though, otherwise you'll get an error.

After the first line, you have more freedom. Spaces are ignored. Lines whose first non-space character is "#" will
be considered a comment, and ignored as well.

You're welcome to use your own input file; just enter its name as a command line argument and make sure that it's in
the same folder as src. If no command line arguments are given, the program will operate on calc_expressions.txt, which
contains the comments and expressions sent out in the example file, as well as 100 new expressions generated by my
function generateExpression. I wrote generateExpression such that it won't generate anything with a minus sign directly
before a negative sign, because even though my calculator can handle this, Java cannot, so it makes it annoying to see
whether the calculator is correct.

Division or modulo by zero won't break the program; if something like "3/(4+-4)" is given, the calculator will print out
a line saying why it couldn't evaluate the expression, and it will continue evaluating the rest of the expressions.